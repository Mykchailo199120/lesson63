const express = require('express');
const passport = require('passport');
const router = express.Router();
const bcrypt = require('bcryptjs')
const User = require('../models/User');

//–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
router.post('/register', async (req, res) => {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).send("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è");

    const existingUser = await User.findOne({ email });
    if (existingUser) return  res.status(400).send("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î");

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ email, password: hashedPassword });

    await user.save();
    res.redirect(`/login`);
});

//–í—Ö—ñ–¥
router.post('/login', passport.authenticate("local",{
    successRedirect: '/protected',
    failureRedirect: '/login',
    failureFlash: true,
}));

//–í–∏—Ö—ñ–¥
router.get('/logout', (req, res) => {
    req.logout(err =>{
        if(err) return res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É");
        res.redirect('/');
    });
});

router.get('/', (req, res) => {
    res.send('–¶–µ –∫–æ—Ä–Ω—å–æ–≤–∏–π —Ä–æ—É—Ç');

})
// üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.post('/items', async (req, res) => {
    try {
        const item = new Item(req.body);
        await item.save();
        res.status(201).json({ message: '–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ', item });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
router.post('/items/many', async (req, res) => {
    try {
        const items = await Item.insertMany(req.body);
        res.status(201).json({ message: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ–¥–∞–Ω–æ', items });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üü° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.put('/items/:id', async (req, res) => {
    try {
        const updatedItem = await Item.updateOne({ _id: req.params.id }, { $set: req.body });
        res.json({ message: '–î–æ–∫—É–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ', updatedItem });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üü° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
router.put('/items', async (req, res) => {
    try {
        const result = await Item.updateMany(req.body.filter, { $set: req.body.update });
        res.json({ message: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ', result });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üîµ –ó–∞–º—ñ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.put('/items/replace/:id', async (req, res) => {
    try {
        const replacedItem = await Item.replaceOne({ _id: req.params.id }, req.body);
        res.json({ message: '–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–º—ñ–Ω–µ–Ω–æ', replacedItem });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üî¥ –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.delete('/items/:id', async (req, res) => {
    try {
        const deletedItem = await Item.deleteOne({ _id: req.params.id });
        res.json({ message: '–î–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ', deletedItem });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üî¥ –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
router.delete('/items', async (req, res) => {
    try {
        const result = await Item.deleteMany(req.body);
        res.json({ message: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ', result });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// üü¢ –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
router.get('/items', async (req, res) => {
    try {
        const items = await Item.find({}, { name: 1, price: 1 }); // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ü—ñ—ó
        res.json(items);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

app.use('/api', router);


module.exports = router;